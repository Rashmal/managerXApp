name: Build & Sign iOS App

on:
  workflow_dispatch:

jobs:
  # Job 1: Generate .p12 on Ubuntu
  generate-p12:
    runs-on: ubuntu-latest
    outputs:
      p12-artifact: ${{ steps.upload.outputs.artifact-path }}
    steps:
      - uses: actions/checkout@v4

      # Decode private key
      - name: Save Signing Key
        run: echo "${{ secrets.APPLE_SIGNING_KEY }}" > ios_signing.key

      # Decode Apple .cer
      - name: Save Apple Certificate
        run: echo "${{ secrets.APPLE_CERT_BASE64 }}" | base64 -d > ios_cert.cer

      # Convert .cer to PEM
      - name: Convert CER to PEM
        run: openssl x509 -in ios_cert.cer -inform DER -out ios_cert.pem -outform PEM

      # Export .p12
      - name: Export P12
        run: |
          openssl pkcs12 -export \
            -inkey ios_signing.key \
            -in ios_cert.pem \
            -out ios_cert.p12 \
            -password pass:${{ secrets.P12_PASSWORD }}

      # Upload .p12 as artifact
      - name: Upload P12 artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ios-p12
          path: ios_cert.p12

  # Job 2: Build and sign on macOS
  build-ios:
    runs-on: macos-latest
    needs: generate-p12
    steps:
      - uses: actions/checkout@v4

      # Download the .p12 artifact from previous job
      - name: Download P12
        uses: actions/download-artifact@v4
        with:
          name: ios-p12
          path: ios-p12

      # Save Provisioning Profile
      - name: Add Provisioning Profile
        run: |
          echo "${{ secrets.APPLE_PROVISION_PROFILE }}" | base64 -d > managerXApp.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp managerXApp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Install .p12 certificate in keychain
      - name: Install Certificate
        run: |
          security create-keychain -p "" build.keychain
          security import ios-p12/ios_cert.p12 -k ~/Library/Keychains/build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install npm dependencies
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # Build Ionic Capacitor iOS app
      - name: Build Ionic Capacitor iOS
        run: |
          npm run build
          npx cap sync ios
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release archive -archivePath $PWD/build/App.xcarchive

      # Export signed IPA
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath ios/App/build/App.xcarchive \
            -exportOptionsPlist ios/App/exportOptions.plist \
            -exportPath ios/App/output

      # Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/App/output/*.ipa
