name: Build & Sign iOS App

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # 4. Patch PrimeNG if needed
      - name: Patch PrimeNG
        run: |
          sed -i '' 's/, InjectFlags//' node_modules/primeng/dynamicdialog/dynamicdialog-injector.d.ts || true
          sed -i '' 's/| InjectFlags//g' node_modules/primeng/dynamicdialog/dynamicdialog-injector.d.ts || true

      # 5. Build Ionic and sync iOS
      - name: Build Ionic iOS
        run: |
          npm run build
          npx cap sync ios

      # 6. Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          cd ios/App
          pod repo update
          pod install --verbose

      # 7. Detect workspace
      - name: Detect workspace
        run: |
          WORKSPACE=$(find ios/App -maxdepth 1 -name "*.xcworkspace" | head -n 1)
          if [ -z "$WORKSPACE" ]; then
            echo "Error: .xcworkspace not found"
            exit 1
          fi
          echo "Workspace detected: $WORKSPACE"
          echo "WORKSPACE=$WORKSPACE" >> $GITHUB_ENV

      # 8. Setup Ruby & Fastlane
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true

      - name: Install Fastlane
        run: gem install fastlane -v 2.228.0

      # 9. Decode iOS signing files
      - name: Decode iOS Certificates
        run: |
          echo "${IOS_P12_BASE64}" | tr -d '\r' | base64 --decode > ios_cert.p12
          echo "${IOS_MOBILEPROVISION_BASE64}" | base64 --decode > ios_profile.mobileprovision
        env:
          IOS_P12_BASE64: ${{ secrets.IOS_P12_BASE64 }}
          IOS_MOBILEPROVISION_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}

      # 10. Import .p12 into keychain (password hardcoded)
      - name: Import iOS Certificate
        run: |
          security create-keychain -p "" build.keychain
          security import ios_cert.p12 -k ~/Library/Keychains/build.keychain -P "Rashmal@1993" -T /usr/bin/codesign -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain

      # 11. Decode App Store Connect API key
      - name: Setup API Key
        run: |
          echo "${APP_STORE_CONNECT_API_KEY_BASE64}" | base64 --decode > AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}

      # 12. Create export_options.plist
      - name: Create export options plist
        run: |
          cat > export_options.plist <<EOL
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
                <key>method</key>
                <string>app-store</string>
                <key>provisioningProfiles</key>
                <dict>
                    <key>com.managerxpro</key>
                    <string>ios_profile.mobileprovision</string>
                </dict>
            </dict>
            </plist>
            EOL

      # 13. Build & sign iOS with Fastlane
      - name: Build & Sign iOS
        run: |
          mkdir -p build/ios
          fastlane run build_ios_app \
            workspace:"ios/App/App.xcworkspace" \
            scheme:"App" \
            export_method:"app-store" \
            output_directory:"build/ios" \
            xcargs:"DEVELOPMENT_TEAM=NPXC63W394" \
            export_options:"export_options.plist" \
            app_store_connect_api_key_path:"AuthKey.p8"

      # 14. Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: build/ios/*.ipa
