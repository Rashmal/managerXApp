name: Build & Sign iOS App

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # 1. Checkout repo (Shallow clone for speed)
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3. Install npm dependencies
      - name: Install dependencies
        # FIX: Added --legacy-peer-deps to bypass Angular/FullCalendar conflict
        run: npm ci --legacy-peer-deps 

      # 4. Patch PrimeNG (if needed)
      - name: Patch PrimeNG
        run: |
          sed -i '' 's/, InjectFlags//' node_modules/primeng/dynamicdialog/dynamicdialog-injector.d.ts || true
          sed -i '' 's/| InjectFlags//g' node_modules/primeng/dynamicdialog/dynamicdialog-injector.d.ts || true

      # 5. Build Ionic & sync iOS
      - name: Build Ionic iOS
        run: |
          npm run build
          npx cap sync ios

      # 6. Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          cd ios/App
          pod repo update
          pod install --verbose

      # 7. Detect workspace
      - name: Detect workspace
        run: |
          WORKSPACE_PATH=$(find ios/App -maxdepth 1 -name "*.xcworkspace" -type d | head -n 1)
          if [ -z "$WORKSPACE_PATH" ]; then
            echo "Error: .xcworkspace not found"
            exit 1
          fi
          echo "Workspace detected: $WORKSPACE_PATH"
          echo "WORKSPACE_PATH=$WORKSPACE_PATH" >> $GITHUB_ENV
          echo "WORKSPACE_NAME=$(basename $WORKSPACE_PATH)" >> $GITHUB_ENV

      # 8. Verify scheme
      - name: Verify workspace scheme
        run: |
          cd ios/App
          SCHEME="App"
          if ! xcodebuild -list -workspace "${{ env.WORKSPACE_NAME }}" | grep -q "$SCHEME"; then
            echo "Error: Scheme '$SCHEME' not found"
            exit 1
          fi
          echo "Scheme '$SCHEME' verified"

      # 9. Setup Ruby & Fastlane
      - name: Setup Ruby & Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true
      
      - name: Install Fastlane
        run: gem install fastlane -v 2.228.0

      # 10. Setup App Store Connect API key (.p8 file)
      - name: Setup API Key
        run: |
          echo "${APP_STORE_CONNECT_API_KEY_BASE64}" | base64 --decode > AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}

      # 11. Setup SSH for match repo access
      - name: Setup SSH for match
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_REPO_SSH_PRIVATE_KEY }}

      # 12. Fetch signing credentials (Run without --readonly for first time setup)
      - name: Fetch signing credentials
        run: |
          fastlane match appstore \
            --type appstore \
            --app_identifier com.managerxpro \
            --api_key_path AuthKey.p8 \
            --git_url ${{ secrets.FASTLANE_MATCH_GIT_URL }}
        env:
          FASTLANE_MATCH_GIT_URL: ${{ secrets.FASTLANE_MATCH_GIT_URL }}
          # Hardcoded Match Password
          MATCH_PASSWORD: Rashmal@1993 
          
      # 13. Update Xcode Project Team ID <--- TEAM ID HARDCODED HERE
      - name: Set Development Team ID
        run: |
          fastlane run update_project_team \
            xcodeproj:"ios/App/App.xcodeproj" \
            teamid:"NPXC63W394"
        
      # 14. Build & sign iOS IPA
      - name: Build & Sign iOS
        run: |
          mkdir -p build/ios
          fastlane run build_ios_app \
            workspace:"${{ env.WORKSPACE_PATH }}" \
            scheme:"App" \
            export_method:"app-store" \
            output_directory:"build/ios"

      # 15. Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: iOS-IPA
          path: build/ios/*.ipa